// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "cordic.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic cordic::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic cordic::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<20> cordic::ap_ST_fsm_state1 = "1";
const sc_lv<20> cordic::ap_ST_fsm_state2 = "10";
const sc_lv<20> cordic::ap_ST_fsm_state3 = "100";
const sc_lv<20> cordic::ap_ST_fsm_state4 = "1000";
const sc_lv<20> cordic::ap_ST_fsm_state5 = "10000";
const sc_lv<20> cordic::ap_ST_fsm_state6 = "100000";
const sc_lv<20> cordic::ap_ST_fsm_state7 = "1000000";
const sc_lv<20> cordic::ap_ST_fsm_state8 = "10000000";
const sc_lv<20> cordic::ap_ST_fsm_state9 = "100000000";
const sc_lv<20> cordic::ap_ST_fsm_state10 = "1000000000";
const sc_lv<20> cordic::ap_ST_fsm_state11 = "10000000000";
const sc_lv<20> cordic::ap_ST_fsm_state12 = "100000000000";
const sc_lv<20> cordic::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<20> cordic::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<20> cordic::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<20> cordic::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<20> cordic::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<20> cordic::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<20> cordic::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<20> cordic::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<32> cordic::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> cordic::ap_const_lv32_8 = "1000";
const sc_lv<32> cordic::ap_const_lv32_E = "1110";
const sc_lv<32> cordic::ap_const_lv32_1 = "1";
const sc_lv<1> cordic::ap_const_lv1_0 = "0";
const sc_lv<32> cordic::ap_const_lv32_2 = "10";
const sc_lv<32> cordic::ap_const_lv32_D = "1101";
const sc_lv<32> cordic::ap_const_lv32_13 = "10011";
const sc_lv<64> cordic::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> cordic::ap_const_lv64_3FE36E978D4FDF3B = "11111111100011011011101001011110001101010011111101111100111011";
const sc_lv<64> cordic::ap_const_lv64_3FF0000000000000 = "11111111110000000000000000000000000000000000000000000000000000";
const sc_lv<3> cordic::ap_const_lv3_0 = "000";
const sc_lv<1> cordic::ap_const_lv1_1 = "1";
const sc_lv<32> cordic::ap_const_lv32_9 = "1001";
const sc_lv<32> cordic::ap_const_lv32_F = "1111";
const sc_lv<32> cordic::ap_const_lv32_3 = "11";
const sc_lv<64> cordic::ap_const_lv64_3FE0000000000000 = "11111111100000000000000000000000000000000000000000000000000000";
const sc_lv<3> cordic::ap_const_lv3_5 = "101";
const sc_lv<3> cordic::ap_const_lv3_1 = "1";
const sc_lv<32> cordic::ap_const_lv32_34 = "110100";
const sc_lv<32> cordic::ap_const_lv32_3E = "111110";
const sc_lv<11> cordic::ap_const_lv11_7FF = "11111111111";
const sc_lv<52> cordic::ap_const_lv52_0 = "0000000000000000000000000000000000000000000000000000";
const sc_lv<64> cordic::ap_const_lv64_BFF0000000000000 = "1011111111110000000000000000000000000000000000000000000000000000";
const sc_lv<5> cordic::ap_const_lv5_2 = "10";
const bool cordic::ap_const_boolean_1 = true;

cordic::cordic(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cordic_ctab_U = new cordic_cordic_ctab("cordic_ctab_U");
    cordic_ctab_U->clk(ap_clk);
    cordic_ctab_U->reset(ap_rst);
    cordic_ctab_U->address0(cordic_ctab_address0);
    cordic_ctab_U->ce0(cordic_ctab_ce0);
    cordic_ctab_U->q0(cordic_ctab_q0);
    cordic_dsub_64ns_bkb_U1 = new cordic_dsub_64ns_bkb<1,5,64,64,64>("cordic_dsub_64ns_bkb_U1");
    cordic_dsub_64ns_bkb_U1->clk(ap_clk);
    cordic_dsub_64ns_bkb_U1->reset(ap_rst);
    cordic_dsub_64ns_bkb_U1->din0(grp_fu_146_p0);
    cordic_dsub_64ns_bkb_U1->din1(grp_fu_146_p1);
    cordic_dsub_64ns_bkb_U1->ce(ap_var_for_const0);
    cordic_dsub_64ns_bkb_U1->dout(grp_fu_146_p2);
    cordic_dadd_64ns_cud_U2 = new cordic_dadd_64ns_cud<1,5,64,64,64>("cordic_dadd_64ns_cud_U2");
    cordic_dadd_64ns_cud_U2->clk(ap_clk);
    cordic_dadd_64ns_cud_U2->reset(ap_rst);
    cordic_dadd_64ns_cud_U2->din0(reg_187);
    cordic_dadd_64ns_cud_U2->din1(cur_sin_0_reg_87);
    cordic_dadd_64ns_cud_U2->ce(ap_var_for_const0);
    cordic_dadd_64ns_cud_U2->dout(grp_fu_152_p2);
    cordic_dmul_64ns_dEe_U3 = new cordic_dmul_64ns_dEe<1,6,64,64,64>("cordic_dmul_64ns_dEe_U3");
    cordic_dmul_64ns_dEe_U3->clk(ap_clk);
    cordic_dmul_64ns_dEe_U3->reset(ap_rst);
    cordic_dmul_64ns_dEe_U3->din0(grp_fu_157_p0);
    cordic_dmul_64ns_dEe_U3->din1(grp_fu_157_p1);
    cordic_dmul_64ns_dEe_U3->ce(ap_var_for_const0);
    cordic_dmul_64ns_dEe_U3->dout(grp_fu_157_p2);
    cordic_dmul_64ns_dEe_U4 = new cordic_dmul_64ns_dEe<1,6,64,64,64>("cordic_dmul_64ns_dEe_U4");
    cordic_dmul_64ns_dEe_U4->clk(ap_clk);
    cordic_dmul_64ns_dEe_U4->reset(ap_rst);
    cordic_dmul_64ns_dEe_U4->din0(grp_fu_162_p0);
    cordic_dmul_64ns_dEe_U4->din1(grp_fu_162_p1);
    cordic_dmul_64ns_dEe_U4->ce(ap_var_for_const0);
    cordic_dmul_64ns_dEe_U4->dout(grp_fu_162_p2);
    cordic_dmul_64ns_dEe_U5 = new cordic_dmul_64ns_dEe<1,6,64,64,64>("cordic_dmul_64ns_dEe_U5");
    cordic_dmul_64ns_dEe_U5->clk(ap_clk);
    cordic_dmul_64ns_dEe_U5->reset(ap_rst);
    cordic_dmul_64ns_dEe_U5->din0(grp_fu_167_p0);
    cordic_dmul_64ns_dEe_U5->din1(grp_fu_167_p1);
    cordic_dmul_64ns_dEe_U5->ce(ap_var_for_const0);
    cordic_dmul_64ns_dEe_U5->dout(grp_fu_167_p2);
    cordic_dcmp_64ns_eOg_U6 = new cordic_dcmp_64ns_eOg<1,2,64,64,1>("cordic_dcmp_64ns_eOg_U6");
    cordic_dcmp_64ns_eOg_U6->clk(ap_clk);
    cordic_dcmp_64ns_eOg_U6->reset(ap_rst);
    cordic_dcmp_64ns_eOg_U6->din0(p_0_reg_136);
    cordic_dcmp_64ns_eOg_U6->din1(ap_var_for_const1);
    cordic_dcmp_64ns_eOg_U6->ce(ap_var_for_const0);
    cordic_dcmp_64ns_eOg_U6->opcode(ap_var_for_const2);
    cordic_dcmp_64ns_eOg_U6->dout(grp_fu_175_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_and_ln41_fu_252_p2);
    sensitive << ( or_ln41_fu_246_p2 );
    sensitive << ( grp_fu_175_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln37_fu_199_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln37_fu_199_p2 );

    SC_METHOD(thread_bitcast_ln41_fu_216_p1);
    sensitive << ( p_0_reg_136 );

    SC_METHOD(thread_c);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln37_fu_199_p2 );
    sensitive << ( old_cos_reg_100 );

    SC_METHOD(thread_c_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln37_fu_199_p2 );

    SC_METHOD(thread_cordic_ctab_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln50_fu_211_p1 );

    SC_METHOD(thread_cordic_ctab_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_146_p0);
    sensitive << ( old_cos_reg_100 );
    sensitive << ( p_0_reg_136 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_grp_fu_146_p1);
    sensitive << ( reg_181 );
    sensitive << ( reg_193 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_grp_fu_157_p0);
    sensitive << ( reg_181 );
    sensitive << ( cur_sin_0_reg_87 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_157_p1);
    sensitive << ( select_ln46_reg_284 );
    sensitive << ( scale_f_0_reg_113 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_162_p0);
    sensitive << ( reg_187 );
    sensitive << ( old_cos_reg_100 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_162_p1);
    sensitive << ( select_ln46_reg_284 );
    sensitive << ( scale_f_0_reg_113 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_167_p0);
    sensitive << ( select_ln46_reg_284 );
    sensitive << ( scale_f_0_reg_113 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_167_p1);
    sensitive << ( cordic_ctab_load_reg_291 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_icmp_ln37_fu_199_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( step_0_reg_125 );

    SC_METHOD(thread_icmp_ln41_1_fu_240_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( trunc_ln41_fu_230_p1 );

    SC_METHOD(thread_icmp_ln41_fu_234_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_220_p4 );

    SC_METHOD(thread_or_ln41_fu_246_p2);
    sensitive << ( icmp_ln41_1_fu_240_p2 );
    sensitive << ( icmp_ln41_fu_234_p2 );

    SC_METHOD(thread_s);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln37_fu_199_p2 );
    sensitive << ( cur_sin_0_reg_87 );

    SC_METHOD(thread_s_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln37_fu_199_p2 );

    SC_METHOD(thread_select_ln46_fu_258_p3);
    sensitive << ( and_ln41_fu_252_p2 );

    SC_METHOD(thread_step_fu_205_p2);
    sensitive << ( step_0_reg_125 );

    SC_METHOD(thread_tmp_fu_220_p4);
    sensitive << ( bitcast_ln41_fu_216_p1 );

    SC_METHOD(thread_trunc_ln41_fu_230_p1);
    sensitive << ( bitcast_ln41_fu_216_p1 );

    SC_METHOD(thread_zext_ln50_fu_211_p1);
    sensitive << ( step_0_reg_125 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln37_fu_199_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "00000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "cordic_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, theta, "(port)theta");
    sc_trace(mVcdFile, s, "(port)s");
    sc_trace(mVcdFile, s_ap_vld, "(port)s_ap_vld");
    sc_trace(mVcdFile, c, "(port)c");
    sc_trace(mVcdFile, c_ap_vld, "(port)c_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, cordic_ctab_address0, "cordic_ctab_address0");
    sc_trace(mVcdFile, cordic_ctab_ce0, "cordic_ctab_ce0");
    sc_trace(mVcdFile, cordic_ctab_q0, "cordic_ctab_q0");
    sc_trace(mVcdFile, grp_fu_157_p2, "grp_fu_157_p2");
    sc_trace(mVcdFile, reg_181, "reg_181");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, grp_fu_162_p2, "grp_fu_162_p2");
    sc_trace(mVcdFile, reg_187, "reg_187");
    sc_trace(mVcdFile, grp_fu_167_p2, "grp_fu_167_p2");
    sc_trace(mVcdFile, reg_193, "reg_193");
    sc_trace(mVcdFile, step_fu_205_p2, "step_fu_205_p2");
    sc_trace(mVcdFile, step_reg_274, "step_reg_274");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln37_fu_199_p2, "icmp_ln37_fu_199_p2");
    sc_trace(mVcdFile, select_ln46_fu_258_p3, "select_ln46_fu_258_p3");
    sc_trace(mVcdFile, select_ln46_reg_284, "select_ln46_reg_284");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, cordic_ctab_load_reg_291, "cordic_ctab_load_reg_291");
    sc_trace(mVcdFile, grp_fu_146_p2, "grp_fu_146_p2");
    sc_trace(mVcdFile, theta_assign_reg_296, "theta_assign_reg_296");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, grp_fu_152_p2, "grp_fu_152_p2");
    sc_trace(mVcdFile, cur_sin_0_reg_87, "cur_sin_0_reg_87");
    sc_trace(mVcdFile, old_cos_reg_100, "old_cos_reg_100");
    sc_trace(mVcdFile, scale_f_0_reg_113, "scale_f_0_reg_113");
    sc_trace(mVcdFile, step_0_reg_125, "step_0_reg_125");
    sc_trace(mVcdFile, p_0_reg_136, "p_0_reg_136");
    sc_trace(mVcdFile, zext_ln50_fu_211_p1, "zext_ln50_fu_211_p1");
    sc_trace(mVcdFile, grp_fu_146_p0, "grp_fu_146_p0");
    sc_trace(mVcdFile, grp_fu_146_p1, "grp_fu_146_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, grp_fu_157_p0, "grp_fu_157_p0");
    sc_trace(mVcdFile, grp_fu_157_p1, "grp_fu_157_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_162_p0, "grp_fu_162_p0");
    sc_trace(mVcdFile, grp_fu_162_p1, "grp_fu_162_p1");
    sc_trace(mVcdFile, grp_fu_167_p0, "grp_fu_167_p0");
    sc_trace(mVcdFile, grp_fu_167_p1, "grp_fu_167_p1");
    sc_trace(mVcdFile, bitcast_ln41_fu_216_p1, "bitcast_ln41_fu_216_p1");
    sc_trace(mVcdFile, tmp_fu_220_p4, "tmp_fu_220_p4");
    sc_trace(mVcdFile, trunc_ln41_fu_230_p1, "trunc_ln41_fu_230_p1");
    sc_trace(mVcdFile, icmp_ln41_1_fu_240_p2, "icmp_ln41_1_fu_240_p2");
    sc_trace(mVcdFile, icmp_ln41_fu_234_p2, "icmp_ln41_fu_234_p2");
    sc_trace(mVcdFile, or_ln41_fu_246_p2, "or_ln41_fu_246_p2");
    sc_trace(mVcdFile, grp_fu_175_p2, "grp_fu_175_p2");
    sc_trace(mVcdFile, and_ln41_fu_252_p2, "and_ln41_fu_252_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("cordic.hdltvin.dat");
    mHdltvoutHandle.open("cordic.hdltvout.dat");
}

cordic::~cordic() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete cordic_ctab_U;
    delete cordic_dsub_64ns_bkb_U1;
    delete cordic_dadd_64ns_cud_U2;
    delete cordic_dmul_64ns_dEe_U3;
    delete cordic_dmul_64ns_dEe_U4;
    delete cordic_dmul_64ns_dEe_U5;
    delete cordic_dcmp_64ns_eOg_U6;
}

void cordic::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void cordic::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv64_0;
}

void cordic::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_2;
}

void cordic::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        cur_sin_0_reg_87 = grp_fu_152_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        cur_sin_0_reg_87 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        old_cos_reg_100 = grp_fu_146_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        old_cos_reg_100 = ap_const_lv64_3FE36E978D4FDF3B;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        p_0_reg_136 = theta_assign_reg_296.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_0_reg_136 = theta.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        scale_f_0_reg_113 = reg_193.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        scale_f_0_reg_113 = ap_const_lv64_3FF0000000000000;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        step_0_reg_125 = step_reg_274.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        step_0_reg_125 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cordic_ctab_load_reg_291 = cordic_ctab_q0.read();
        select_ln46_reg_284 = select_ln46_fu_258_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        reg_181 = grp_fu_157_p2.read();
        reg_187 = grp_fu_162_p2.read();
        reg_193 = grp_fu_167_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        step_reg_274 = step_fu_205_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        theta_assign_reg_296 = grp_fu_146_p2.read();
    }
}

void cordic::thread_and_ln41_fu_252_p2() {
    and_ln41_fu_252_p2 = (or_ln41_fu_246_p2.read() & grp_fu_175_p2.read());
}

void cordic::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void cordic::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void cordic::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void cordic::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void cordic::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void cordic::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void cordic::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void cordic::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void cordic::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void cordic::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void cordic::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln37_fu_199_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void cordic::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void cordic::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln37_fu_199_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void cordic::thread_bitcast_ln41_fu_216_p1() {
    bitcast_ln41_fu_216_p1 = p_0_reg_136.read();
}

void cordic::thread_c() {
    c = old_cos_reg_100.read();
}

void cordic::thread_c_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln37_fu_199_p2.read(), ap_const_lv1_1))) {
        c_ap_vld = ap_const_logic_1;
    } else {
        c_ap_vld = ap_const_logic_0;
    }
}

void cordic::thread_cordic_ctab_address0() {
    cordic_ctab_address0 =  (sc_lv<6>) (zext_ln50_fu_211_p1.read());
}

void cordic::thread_cordic_ctab_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cordic_ctab_ce0 = ap_const_logic_1;
    } else {
        cordic_ctab_ce0 = ap_const_logic_0;
    }
}

void cordic::thread_grp_fu_146_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_146_p0 = old_cos_reg_100.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_146_p0 = p_0_reg_136.read();
    } else {
        grp_fu_146_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_grp_fu_146_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_146_p1 = reg_181.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_146_p1 = reg_193.read();
    } else {
        grp_fu_146_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_grp_fu_157_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_157_p0 = reg_181.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_157_p0 = cur_sin_0_reg_87.read();
    } else {
        grp_fu_157_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_grp_fu_157_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_157_p1 = scale_f_0_reg_113.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_157_p1 = select_ln46_reg_284.read();
    } else {
        grp_fu_157_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_grp_fu_162_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_162_p0 = reg_187.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_162_p0 = old_cos_reg_100.read();
    } else {
        grp_fu_162_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_grp_fu_162_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_162_p1 = scale_f_0_reg_113.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_162_p1 = select_ln46_reg_284.read();
    } else {
        grp_fu_162_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_grp_fu_167_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_167_p0 = scale_f_0_reg_113.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_167_p0 = select_ln46_reg_284.read();
    } else {
        grp_fu_167_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_grp_fu_167_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_167_p1 = ap_const_lv64_3FE0000000000000;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_167_p1 = cordic_ctab_load_reg_291.read();
    } else {
        grp_fu_167_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_icmp_ln37_fu_199_p2() {
    icmp_ln37_fu_199_p2 = (!step_0_reg_125.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(step_0_reg_125.read() == ap_const_lv3_5);
}

void cordic::thread_icmp_ln41_1_fu_240_p2() {
    icmp_ln41_1_fu_240_p2 = (!trunc_ln41_fu_230_p1.read().is_01() || !ap_const_lv52_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln41_fu_230_p1.read() == ap_const_lv52_0);
}

void cordic::thread_icmp_ln41_fu_234_p2() {
    icmp_ln41_fu_234_p2 = (!tmp_fu_220_p4.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_220_p4.read() != ap_const_lv11_7FF);
}

void cordic::thread_or_ln41_fu_246_p2() {
    or_ln41_fu_246_p2 = (icmp_ln41_1_fu_240_p2.read() | icmp_ln41_fu_234_p2.read());
}

void cordic::thread_s() {
    s = cur_sin_0_reg_87.read();
}

void cordic::thread_s_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln37_fu_199_p2.read(), ap_const_lv1_1))) {
        s_ap_vld = ap_const_logic_1;
    } else {
        s_ap_vld = ap_const_logic_0;
    }
}

void cordic::thread_select_ln46_fu_258_p3() {
    select_ln46_fu_258_p3 = (!and_ln41_fu_252_p2.read()[0].is_01())? sc_lv<64>(): ((and_ln41_fu_252_p2.read()[0].to_bool())? ap_const_lv64_3FF0000000000000: ap_const_lv64_BFF0000000000000);
}

void cordic::thread_step_fu_205_p2() {
    step_fu_205_p2 = (!step_0_reg_125.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(step_0_reg_125.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void cordic::thread_tmp_fu_220_p4() {
    tmp_fu_220_p4 = bitcast_ln41_fu_216_p1.read().range(62, 52);
}

void cordic::thread_trunc_ln41_fu_230_p1() {
    trunc_ln41_fu_230_p1 = bitcast_ln41_fu_216_p1.read().range(52-1, 0);
}

void cordic::thread_zext_ln50_fu_211_p1() {
    zext_ln50_fu_211_p1 = esl_zext<64,3>(step_0_reg_125.read());
}

void cordic::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln37_fu_199_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<20>) ("XXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void cordic::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"theta\" :  \"" << theta.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s\" :  \"" << s.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_ap_vld\" :  \"" << s_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c\" :  \"" << c.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_ap_vld\" :  \"" << c_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

