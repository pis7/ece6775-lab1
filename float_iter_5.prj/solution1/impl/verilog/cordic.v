// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cordic,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=96,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=39,HLS_SYN_FF=2574,HLS_SYN_LUT=4898,HLS_VERSION=2019_2}" *)

module cordic (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        theta,
        s,
        s_ap_vld,
        c,
        c_ap_vld
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] theta;
output  [63:0] s;
output   s_ap_vld;
output  [63:0] c;
output   c_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s_ap_vld;
reg c_ap_vld;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] cordic_ctab_address0;
reg    cordic_ctab_ce0;
wire   [63:0] cordic_ctab_q0;
wire   [63:0] grp_fu_157_p2;
reg   [63:0] reg_181;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state15;
wire   [63:0] grp_fu_162_p2;
reg   [63:0] reg_187;
wire   [63:0] grp_fu_167_p2;
reg   [63:0] reg_193;
wire   [2:0] step_fu_205_p2;
reg   [2:0] step_reg_274;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln37_fu_199_p2;
wire   [63:0] select_ln46_fu_258_p3;
reg   [63:0] select_ln46_reg_284;
wire    ap_CS_fsm_state3;
reg   [63:0] cordic_ctab_load_reg_291;
wire   [63:0] grp_fu_146_p2;
reg   [63:0] theta_assign_reg_296;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state20;
wire   [63:0] grp_fu_152_p2;
reg   [63:0] cur_sin_0_reg_87;
reg   [63:0] old_cos_reg_100;
reg   [63:0] scale_f_0_reg_113;
reg   [2:0] step_0_reg_125;
reg   [63:0] p_0_reg_136;
wire   [63:0] zext_ln50_fu_211_p1;
reg   [63:0] grp_fu_146_p0;
reg   [63:0] grp_fu_146_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state16;
reg   [63:0] grp_fu_157_p0;
reg   [63:0] grp_fu_157_p1;
wire    ap_CS_fsm_state4;
reg   [63:0] grp_fu_162_p0;
reg   [63:0] grp_fu_162_p1;
reg   [63:0] grp_fu_167_p0;
reg   [63:0] grp_fu_167_p1;
wire   [63:0] bitcast_ln41_fu_216_p1;
wire   [10:0] tmp_fu_220_p4;
wire   [51:0] trunc_ln41_fu_230_p1;
wire   [0:0] icmp_ln41_1_fu_240_p2;
wire   [0:0] icmp_ln41_fu_234_p2;
wire   [0:0] or_ln41_fu_246_p2;
wire   [0:0] grp_fu_175_p2;
wire   [0:0] and_ln41_fu_252_p2;
reg   [19:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
end

cordic_cordic_ctab #(
    .DataWidth( 64 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
cordic_ctab_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cordic_ctab_address0),
    .ce0(cordic_ctab_ce0),
    .q0(cordic_ctab_q0)
);

cordic_dsub_64ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
cordic_dsub_64ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_146_p0),
    .din1(grp_fu_146_p1),
    .ce(1'b1),
    .dout(grp_fu_146_p2)
);

cordic_dadd_64ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
cordic_dadd_64ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_187),
    .din1(cur_sin_0_reg_87),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

cordic_dmul_64ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
cordic_dmul_64ns_dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_157_p0),
    .din1(grp_fu_157_p1),
    .ce(1'b1),
    .dout(grp_fu_157_p2)
);

cordic_dmul_64ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
cordic_dmul_64ns_dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_162_p0),
    .din1(grp_fu_162_p1),
    .ce(1'b1),
    .dout(grp_fu_162_p2)
);

cordic_dmul_64ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
cordic_dmul_64ns_dEe_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_167_p0),
    .din1(grp_fu_167_p1),
    .ce(1'b1),
    .dout(grp_fu_167_p2)
);

cordic_dcmp_64ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
cordic_dcmp_64ns_eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_0_reg_136),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_175_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        cur_sin_0_reg_87 <= grp_fu_152_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cur_sin_0_reg_87 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        old_cos_reg_100 <= grp_fu_146_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        old_cos_reg_100 <= 64'd4603644841292717883;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        p_0_reg_136 <= theta_assign_reg_296;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_reg_136 <= theta;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        scale_f_0_reg_113 <= reg_193;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        scale_f_0_reg_113 <= 64'd4607182418800017408;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        step_0_reg_125 <= step_reg_274;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        step_0_reg_125 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cordic_ctab_load_reg_291 <= cordic_ctab_q0;
        select_ln46_reg_284[63] <= select_ln46_fu_258_p3[63];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_181 <= grp_fu_157_p2;
        reg_187 <= grp_fu_162_p2;
        reg_193 <= grp_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        step_reg_274 <= step_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        theta_assign_reg_296 <= grp_fu_146_p2;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        c_ap_vld = 1'b1;
    end else begin
        c_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cordic_ctab_ce0 = 1'b1;
    end else begin
        cordic_ctab_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_146_p0 = old_cos_reg_100;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_146_p0 = p_0_reg_136;
    end else begin
        grp_fu_146_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_146_p1 = reg_181;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_146_p1 = reg_193;
    end else begin
        grp_fu_146_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_157_p0 = reg_181;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_157_p0 = cur_sin_0_reg_87;
    end else begin
        grp_fu_157_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_157_p1 = scale_f_0_reg_113;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_157_p1 = select_ln46_reg_284;
    end else begin
        grp_fu_157_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_162_p0 = reg_187;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_162_p0 = old_cos_reg_100;
    end else begin
        grp_fu_162_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_162_p1 = scale_f_0_reg_113;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_162_p1 = select_ln46_reg_284;
    end else begin
        grp_fu_162_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_167_p0 = scale_f_0_reg_113;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_167_p0 = select_ln46_reg_284;
    end else begin
        grp_fu_167_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_167_p1 = 64'd4602678819172646912;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_167_p1 = cordic_ctab_load_reg_291;
    end else begin
        grp_fu_167_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        s_ap_vld = 1'b1;
    end else begin
        s_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln37_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln41_fu_252_p2 = (or_ln41_fu_246_p2 & grp_fu_175_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln41_fu_216_p1 = p_0_reg_136;

assign c = old_cos_reg_100;

assign cordic_ctab_address0 = zext_ln50_fu_211_p1;

assign icmp_ln37_fu_199_p2 = ((step_0_reg_125 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln41_1_fu_240_p2 = ((trunc_ln41_fu_230_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_234_p2 = ((tmp_fu_220_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign or_ln41_fu_246_p2 = (icmp_ln41_fu_234_p2 | icmp_ln41_1_fu_240_p2);

assign s = cur_sin_0_reg_87;

assign select_ln46_fu_258_p3 = ((and_ln41_fu_252_p2[0:0] === 1'b1) ? 64'd4607182418800017408 : 64'd13830554455654793216);

assign step_fu_205_p2 = (step_0_reg_125 + 3'd1);

assign tmp_fu_220_p4 = {{bitcast_ln41_fu_216_p1[62:52]}};

assign trunc_ln41_fu_230_p1 = bitcast_ln41_fu_216_p1[51:0];

assign zext_ln50_fu_211_p1 = step_0_reg_125;

always @ (posedge ap_clk) begin
    select_ln46_reg_284[62:0] <= 63'b011111111110000000000000000000000000000000000000000000000000000;
end

endmodule //cordic
