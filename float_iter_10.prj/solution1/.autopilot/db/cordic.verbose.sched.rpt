

================================================================
== Vivado HLS Report for 'cordic'
================================================================
* Date:           Tue Sep  3 21:13:56 2024

* Version:        2019.2 (Build 2704478 on Wed Nov 06 22:10:23 MST 2019)
* Project:        float_iter_10.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020-clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  | 10.00 ns | 8.232 ns |   1.25 ns  |
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |      191|      191| 1.910 us | 1.910 us |  191|  191|   none  |
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- FLOAT_STEP_LOOP  |      190|      190|        19|          -|          -|    10|    no    |
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 20
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 
10 --> 11 
11 --> 12 
12 --> 13 
13 --> 14 
14 --> 15 
15 --> 16 
16 --> 17 
17 --> 18 
18 --> 19 
19 --> 20 
20 --> 2 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.76>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(double %theta) nounwind, !map !14"   --->   Operation 21 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(double* %s) nounwind, !map !20"   --->   Operation 22 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(double* %c) nounwind, !map !24"   --->   Operation 23 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([7 x i8]* @cordic_str) nounwind"   --->   Operation 24 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%theta_read = call double @_ssdm_op_Read.ap_auto.double(double %theta) nounwind" [cordic.cpp:17]   --->   Operation 25 'read' 'theta_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (1.76ns)   --->   "br label %1" [cordic.cpp:37]   --->   Operation 26 'br' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 5.46>
ST_2 : Operation 27 [1/1] (0.00ns)   --->   "%cur_sin_0 = phi double [ 0.000000e+00, %0 ], [ %cur_sin, %2 ]"   --->   Operation 27 'phi' 'cur_sin_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 28 [1/1] (0.00ns)   --->   "%old_cos = phi double [ 6.072500e-01, %0 ], [ %cur_cos, %2 ]"   --->   Operation 28 'phi' 'old_cos' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 29 [1/1] (0.00ns)   --->   "%scale_f_0 = phi double [ 1.000000e+00, %0 ], [ %scale_f, %2 ]"   --->   Operation 29 'phi' 'scale_f_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 30 [1/1] (0.00ns)   --->   "%step_0 = phi i4 [ 0, %0 ], [ %step, %2 ]"   --->   Operation 30 'phi' 'step_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 31 [1/1] (0.00ns)   --->   "%p_0 = phi double [ %theta_read, %0 ], [ %theta_assign, %2 ]" [cordic.cpp:17]   --->   Operation 31 'phi' 'p_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 32 [1/1] (1.30ns)   --->   "%icmp_ln37 = icmp eq i4 %step_0, -6" [cordic.cpp:37]   --->   Operation 32 'icmp' 'icmp_ln37' <Predicate = true> <Delay = 1.30> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.89> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 33 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 10, i64 10, i64 10) nounwind"   --->   Operation 33 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 34 [1/1] (1.73ns)   --->   "%step = add i4 %step_0, 1" [cordic.cpp:37]   --->   Operation 34 'add' 'step' <Predicate = true> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 35 [1/1] (0.00ns)   --->   "br i1 %icmp_ln37, label %3, label %2" [cordic.cpp:37]   --->   Operation 35 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 36 [2/2] (5.46ns)   --->   "%tmp_3 = fcmp ogt double %p_0, 0.000000e+00" [cordic.cpp:41]   --->   Operation 36 'dcmp' 'tmp_3' <Predicate = (!icmp_ln37)> <Delay = 5.46> <Core = "DCmp">   --->   Core 120 'DCmp' <Latency = 1> <II = 1> <Delay = 5.46> <FuncUnit> <Opcode : 'dcmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 37 [1/1] (0.00ns)   --->   "%zext_ln50 = zext i4 %step_0 to i64" [cordic.cpp:50]   --->   Operation 37 'zext' 'zext_ln50' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 38 [1/1] (0.00ns)   --->   "%cordic_ctab_addr = getelementptr inbounds [64 x double]* @cordic_ctab, i64 0, i64 %zext_ln50" [cordic.cpp:50]   --->   Operation 38 'getelementptr' 'cordic_ctab_addr' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 39 [2/2] (3.25ns)   --->   "%cordic_ctab_load = load double* %cordic_ctab_addr, align 8" [cordic.cpp:50]   --->   Operation 39 'load' 'cordic_ctab_load' <Predicate = (!icmp_ln37)> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 64> <Depth = 64> <ROM>
ST_2 : Operation 40 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.doubleP(double* %c, double %old_cos) nounwind" [cordic.cpp:57]   --->   Operation 40 'write' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 41 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.doubleP(double* %s, double %cur_sin_0) nounwind" [cordic.cpp:58]   --->   Operation 41 'write' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "ret void" [cordic.cpp:61]   --->   Operation 42 'ret' <Predicate = (icmp_ln37)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 6.94>
ST_3 : Operation 43 [1/1] (0.00ns)   --->   "%bitcast_ln41 = bitcast double %p_0 to i64" [cordic.cpp:41]   --->   Operation 43 'bitcast' 'bitcast_ln41' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 44 [1/1] (0.00ns)   --->   "%tmp = call i11 @_ssdm_op_PartSelect.i11.i64.i32.i32(i64 %bitcast_ln41, i32 52, i32 62)" [cordic.cpp:41]   --->   Operation 44 'partselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 45 [1/1] (0.00ns)   --->   "%trunc_ln41 = trunc i64 %bitcast_ln41 to i52" [cordic.cpp:41]   --->   Operation 45 'trunc' 'trunc_ln41' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 46 [1/1] (1.88ns)   --->   "%icmp_ln41 = icmp ne i11 %tmp, -1" [cordic.cpp:41]   --->   Operation 46 'icmp' 'icmp_ln41' <Predicate = true> <Delay = 1.88> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.89> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 47 [1/1] (2.89ns)   --->   "%icmp_ln41_1 = icmp eq i52 %trunc_ln41, 0" [cordic.cpp:41]   --->   Operation 47 'icmp' 'icmp_ln41_1' <Predicate = true> <Delay = 2.89> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.89> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 48 [1/1] (0.00ns) (grouped into LUT with out node select_ln46)   --->   "%or_ln41 = or i1 %icmp_ln41_1, %icmp_ln41" [cordic.cpp:41]   --->   Operation 48 'or' 'or_ln41' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 49 [1/2] (5.46ns)   --->   "%tmp_3 = fcmp ogt double %p_0, 0.000000e+00" [cordic.cpp:41]   --->   Operation 49 'dcmp' 'tmp_3' <Predicate = true> <Delay = 5.46> <Core = "DCmp">   --->   Core 120 'DCmp' <Latency = 1> <II = 1> <Delay = 5.46> <FuncUnit> <Opcode : 'dcmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 50 [1/1] (0.00ns) (grouped into LUT with out node select_ln46)   --->   "%and_ln41 = and i1 %or_ln41, %tmp_3" [cordic.cpp:41]   --->   Operation 50 'and' 'and_ln41' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 51 [1/1] (1.48ns) (out node of the LUT)   --->   "%select_ln46 = select i1 %and_ln41, double 1.000000e+00, double -1.000000e+00" [cordic.cpp:46]   --->   Operation 51 'select' 'select_ln46' <Predicate = true> <Delay = 1.48> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 52 [1/2] (3.25ns)   --->   "%cordic_ctab_load = load double* %cordic_ctab_addr, align 8" [cordic.cpp:50]   --->   Operation 52 'load' 'cordic_ctab_load' <Predicate = true> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 64> <Depth = 64> <ROM>

State 4 <SV = 3> <Delay = 7.78>
ST_4 : Operation 53 [6/6] (7.78ns)   --->   "%tmp_1 = fmul double %cur_sin_0, %select_ln46" [cordic.cpp:46]   --->   Operation 53 'dmul' 'tmp_1' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 54 [6/6] (7.78ns)   --->   "%tmp_4 = fmul double %old_cos, %select_ln46" [cordic.cpp:47]   --->   Operation 54 'dmul' 'tmp_4' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 55 [6/6] (7.78ns)   --->   "%tmp_7 = fmul double %select_ln46, %cordic_ctab_load" [cordic.cpp:50]   --->   Operation 55 'dmul' 'tmp_7' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>

State 5 <SV = 4> <Delay = 7.78>
ST_5 : Operation 56 [5/6] (7.78ns)   --->   "%tmp_1 = fmul double %cur_sin_0, %select_ln46" [cordic.cpp:46]   --->   Operation 56 'dmul' 'tmp_1' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 57 [5/6] (7.78ns)   --->   "%tmp_4 = fmul double %old_cos, %select_ln46" [cordic.cpp:47]   --->   Operation 57 'dmul' 'tmp_4' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 58 [5/6] (7.78ns)   --->   "%tmp_7 = fmul double %select_ln46, %cordic_ctab_load" [cordic.cpp:50]   --->   Operation 58 'dmul' 'tmp_7' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>

State 6 <SV = 5> <Delay = 7.78>
ST_6 : Operation 59 [4/6] (7.78ns)   --->   "%tmp_1 = fmul double %cur_sin_0, %select_ln46" [cordic.cpp:46]   --->   Operation 59 'dmul' 'tmp_1' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 60 [4/6] (7.78ns)   --->   "%tmp_4 = fmul double %old_cos, %select_ln46" [cordic.cpp:47]   --->   Operation 60 'dmul' 'tmp_4' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 61 [4/6] (7.78ns)   --->   "%tmp_7 = fmul double %select_ln46, %cordic_ctab_load" [cordic.cpp:50]   --->   Operation 61 'dmul' 'tmp_7' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>

State 7 <SV = 6> <Delay = 7.78>
ST_7 : Operation 62 [3/6] (7.78ns)   --->   "%tmp_1 = fmul double %cur_sin_0, %select_ln46" [cordic.cpp:46]   --->   Operation 62 'dmul' 'tmp_1' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 63 [3/6] (7.78ns)   --->   "%tmp_4 = fmul double %old_cos, %select_ln46" [cordic.cpp:47]   --->   Operation 63 'dmul' 'tmp_4' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 64 [3/6] (7.78ns)   --->   "%tmp_7 = fmul double %select_ln46, %cordic_ctab_load" [cordic.cpp:50]   --->   Operation 64 'dmul' 'tmp_7' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>

State 8 <SV = 7> <Delay = 7.78>
ST_8 : Operation 65 [2/6] (7.78ns)   --->   "%tmp_1 = fmul double %cur_sin_0, %select_ln46" [cordic.cpp:46]   --->   Operation 65 'dmul' 'tmp_1' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 66 [2/6] (7.78ns)   --->   "%tmp_4 = fmul double %old_cos, %select_ln46" [cordic.cpp:47]   --->   Operation 66 'dmul' 'tmp_4' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 67 [2/6] (7.78ns)   --->   "%tmp_7 = fmul double %select_ln46, %cordic_ctab_load" [cordic.cpp:50]   --->   Operation 67 'dmul' 'tmp_7' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>

State 9 <SV = 8> <Delay = 7.78>
ST_9 : Operation 68 [1/6] (7.78ns)   --->   "%tmp_1 = fmul double %cur_sin_0, %select_ln46" [cordic.cpp:46]   --->   Operation 68 'dmul' 'tmp_1' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 69 [1/6] (7.78ns)   --->   "%tmp_4 = fmul double %old_cos, %select_ln46" [cordic.cpp:47]   --->   Operation 69 'dmul' 'tmp_4' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 70 [1/6] (7.78ns)   --->   "%tmp_7 = fmul double %select_ln46, %cordic_ctab_load" [cordic.cpp:50]   --->   Operation 70 'dmul' 'tmp_7' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>

State 10 <SV = 9> <Delay = 8.23>
ST_10 : Operation 71 [6/6] (7.78ns)   --->   "%tmp_2 = fmul double %tmp_1, %scale_f_0" [cordic.cpp:46]   --->   Operation 71 'dmul' 'tmp_2' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 72 [6/6] (7.78ns)   --->   "%tmp_5 = fmul double %tmp_4, %scale_f_0" [cordic.cpp:47]   --->   Operation 72 'dmul' 'tmp_5' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 73 [5/5] (8.23ns)   --->   "%theta_assign = fsub double %p_0, %tmp_7" [cordic.cpp:50]   --->   Operation 73 'dsub' 'theta_assign' <Predicate = true> <Delay = 8.23> <Core = "DAddSub">   --->   Core 115 'DAddSub' <Latency = 4> <II = 1> <Delay = 8.23> <FuncUnit> <Opcode : 'dadd' 'dsub'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 74 [6/6] (7.78ns)   --->   "%scale_f = fmul double %scale_f_0, 5.000000e-01" [cordic.cpp:53]   --->   Operation 74 'dmul' 'scale_f' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>

State 11 <SV = 10> <Delay = 8.23>
ST_11 : Operation 75 [5/6] (7.78ns)   --->   "%tmp_2 = fmul double %tmp_1, %scale_f_0" [cordic.cpp:46]   --->   Operation 75 'dmul' 'tmp_2' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_11 : Operation 76 [5/6] (7.78ns)   --->   "%tmp_5 = fmul double %tmp_4, %scale_f_0" [cordic.cpp:47]   --->   Operation 76 'dmul' 'tmp_5' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_11 : Operation 77 [4/5] (8.23ns)   --->   "%theta_assign = fsub double %p_0, %tmp_7" [cordic.cpp:50]   --->   Operation 77 'dsub' 'theta_assign' <Predicate = true> <Delay = 8.23> <Core = "DAddSub">   --->   Core 115 'DAddSub' <Latency = 4> <II = 1> <Delay = 8.23> <FuncUnit> <Opcode : 'dadd' 'dsub'> <InPorts = 2> <OutPorts = 1>
ST_11 : Operation 78 [5/6] (7.78ns)   --->   "%scale_f = fmul double %scale_f_0, 5.000000e-01" [cordic.cpp:53]   --->   Operation 78 'dmul' 'scale_f' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>

State 12 <SV = 11> <Delay = 8.23>
ST_12 : Operation 79 [4/6] (7.78ns)   --->   "%tmp_2 = fmul double %tmp_1, %scale_f_0" [cordic.cpp:46]   --->   Operation 79 'dmul' 'tmp_2' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_12 : Operation 80 [4/6] (7.78ns)   --->   "%tmp_5 = fmul double %tmp_4, %scale_f_0" [cordic.cpp:47]   --->   Operation 80 'dmul' 'tmp_5' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_12 : Operation 81 [3/5] (8.23ns)   --->   "%theta_assign = fsub double %p_0, %tmp_7" [cordic.cpp:50]   --->   Operation 81 'dsub' 'theta_assign' <Predicate = true> <Delay = 8.23> <Core = "DAddSub">   --->   Core 115 'DAddSub' <Latency = 4> <II = 1> <Delay = 8.23> <FuncUnit> <Opcode : 'dadd' 'dsub'> <InPorts = 2> <OutPorts = 1>
ST_12 : Operation 82 [4/6] (7.78ns)   --->   "%scale_f = fmul double %scale_f_0, 5.000000e-01" [cordic.cpp:53]   --->   Operation 82 'dmul' 'scale_f' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>

State 13 <SV = 12> <Delay = 8.23>
ST_13 : Operation 83 [3/6] (7.78ns)   --->   "%tmp_2 = fmul double %tmp_1, %scale_f_0" [cordic.cpp:46]   --->   Operation 83 'dmul' 'tmp_2' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_13 : Operation 84 [3/6] (7.78ns)   --->   "%tmp_5 = fmul double %tmp_4, %scale_f_0" [cordic.cpp:47]   --->   Operation 84 'dmul' 'tmp_5' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_13 : Operation 85 [2/5] (8.23ns)   --->   "%theta_assign = fsub double %p_0, %tmp_7" [cordic.cpp:50]   --->   Operation 85 'dsub' 'theta_assign' <Predicate = true> <Delay = 8.23> <Core = "DAddSub">   --->   Core 115 'DAddSub' <Latency = 4> <II = 1> <Delay = 8.23> <FuncUnit> <Opcode : 'dadd' 'dsub'> <InPorts = 2> <OutPorts = 1>
ST_13 : Operation 86 [3/6] (7.78ns)   --->   "%scale_f = fmul double %scale_f_0, 5.000000e-01" [cordic.cpp:53]   --->   Operation 86 'dmul' 'scale_f' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>

State 14 <SV = 13> <Delay = 8.23>
ST_14 : Operation 87 [2/6] (7.78ns)   --->   "%tmp_2 = fmul double %tmp_1, %scale_f_0" [cordic.cpp:46]   --->   Operation 87 'dmul' 'tmp_2' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 88 [2/6] (7.78ns)   --->   "%tmp_5 = fmul double %tmp_4, %scale_f_0" [cordic.cpp:47]   --->   Operation 88 'dmul' 'tmp_5' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 89 [1/5] (8.23ns)   --->   "%theta_assign = fsub double %p_0, %tmp_7" [cordic.cpp:50]   --->   Operation 89 'dsub' 'theta_assign' <Predicate = true> <Delay = 8.23> <Core = "DAddSub">   --->   Core 115 'DAddSub' <Latency = 4> <II = 1> <Delay = 8.23> <FuncUnit> <Opcode : 'dadd' 'dsub'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 90 [2/6] (7.78ns)   --->   "%scale_f = fmul double %scale_f_0, 5.000000e-01" [cordic.cpp:53]   --->   Operation 90 'dmul' 'scale_f' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>

State 15 <SV = 14> <Delay = 7.78>
ST_15 : Operation 91 [1/6] (7.78ns)   --->   "%tmp_2 = fmul double %tmp_1, %scale_f_0" [cordic.cpp:46]   --->   Operation 91 'dmul' 'tmp_2' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_15 : Operation 92 [1/6] (7.78ns)   --->   "%tmp_5 = fmul double %tmp_4, %scale_f_0" [cordic.cpp:47]   --->   Operation 92 'dmul' 'tmp_5' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>
ST_15 : Operation 93 [1/6] (7.78ns)   --->   "%scale_f = fmul double %scale_f_0, 5.000000e-01" [cordic.cpp:53]   --->   Operation 93 'dmul' 'scale_f' <Predicate = true> <Delay = 7.78> <Core = "DMul">   --->   Core 116 'DMul' <Latency = 5> <II = 1> <Delay = 7.78> <FuncUnit> <Opcode : 'dmul'> <InPorts = 2> <OutPorts = 1>

State 16 <SV = 15> <Delay = 8.23>
ST_16 : Operation 94 [5/5] (8.23ns)   --->   "%cur_cos = fsub double %old_cos, %tmp_2" [cordic.cpp:46]   --->   Operation 94 'dsub' 'cur_cos' <Predicate = true> <Delay = 8.23> <Core = "DAddSub">   --->   Core 115 'DAddSub' <Latency = 4> <II = 1> <Delay = 8.23> <FuncUnit> <Opcode : 'dadd' 'dsub'> <InPorts = 2> <OutPorts = 1>
ST_16 : Operation 95 [5/5] (8.23ns)   --->   "%cur_sin = fadd double %tmp_5, %cur_sin_0" [cordic.cpp:47]   --->   Operation 95 'dadd' 'cur_sin' <Predicate = true> <Delay = 8.23> <Core = "DAddSub">   --->   Core 115 'DAddSub' <Latency = 4> <II = 1> <Delay = 8.23> <FuncUnit> <Opcode : 'dadd' 'dsub'> <InPorts = 2> <OutPorts = 1>

State 17 <SV = 16> <Delay = 8.23>
ST_17 : Operation 96 [4/5] (8.23ns)   --->   "%cur_cos = fsub double %old_cos, %tmp_2" [cordic.cpp:46]   --->   Operation 96 'dsub' 'cur_cos' <Predicate = true> <Delay = 8.23> <Core = "DAddSub">   --->   Core 115 'DAddSub' <Latency = 4> <II = 1> <Delay = 8.23> <FuncUnit> <Opcode : 'dadd' 'dsub'> <InPorts = 2> <OutPorts = 1>
ST_17 : Operation 97 [4/5] (8.23ns)   --->   "%cur_sin = fadd double %tmp_5, %cur_sin_0" [cordic.cpp:47]   --->   Operation 97 'dadd' 'cur_sin' <Predicate = true> <Delay = 8.23> <Core = "DAddSub">   --->   Core 115 'DAddSub' <Latency = 4> <II = 1> <Delay = 8.23> <FuncUnit> <Opcode : 'dadd' 'dsub'> <InPorts = 2> <OutPorts = 1>

State 18 <SV = 17> <Delay = 8.23>
ST_18 : Operation 98 [3/5] (8.23ns)   --->   "%cur_cos = fsub double %old_cos, %tmp_2" [cordic.cpp:46]   --->   Operation 98 'dsub' 'cur_cos' <Predicate = true> <Delay = 8.23> <Core = "DAddSub">   --->   Core 115 'DAddSub' <Latency = 4> <II = 1> <Delay = 8.23> <FuncUnit> <Opcode : 'dadd' 'dsub'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 99 [3/5] (8.23ns)   --->   "%cur_sin = fadd double %tmp_5, %cur_sin_0" [cordic.cpp:47]   --->   Operation 99 'dadd' 'cur_sin' <Predicate = true> <Delay = 8.23> <Core = "DAddSub">   --->   Core 115 'DAddSub' <Latency = 4> <II = 1> <Delay = 8.23> <FuncUnit> <Opcode : 'dadd' 'dsub'> <InPorts = 2> <OutPorts = 1>

State 19 <SV = 18> <Delay = 8.23>
ST_19 : Operation 100 [2/5] (8.23ns)   --->   "%cur_cos = fsub double %old_cos, %tmp_2" [cordic.cpp:46]   --->   Operation 100 'dsub' 'cur_cos' <Predicate = true> <Delay = 8.23> <Core = "DAddSub">   --->   Core 115 'DAddSub' <Latency = 4> <II = 1> <Delay = 8.23> <FuncUnit> <Opcode : 'dadd' 'dsub'> <InPorts = 2> <OutPorts = 1>
ST_19 : Operation 101 [2/5] (8.23ns)   --->   "%cur_sin = fadd double %tmp_5, %cur_sin_0" [cordic.cpp:47]   --->   Operation 101 'dadd' 'cur_sin' <Predicate = true> <Delay = 8.23> <Core = "DAddSub">   --->   Core 115 'DAddSub' <Latency = 4> <II = 1> <Delay = 8.23> <FuncUnit> <Opcode : 'dadd' 'dsub'> <InPorts = 2> <OutPorts = 1>

State 20 <SV = 19> <Delay = 8.23>
ST_20 : Operation 102 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([16 x i8]* @p_str) nounwind" [cordic.cpp:38]   --->   Operation 102 'specloopname' <Predicate = true> <Delay = 0.00>
ST_20 : Operation 103 [1/5] (8.23ns)   --->   "%cur_cos = fsub double %old_cos, %tmp_2" [cordic.cpp:46]   --->   Operation 103 'dsub' 'cur_cos' <Predicate = true> <Delay = 8.23> <Core = "DAddSub">   --->   Core 115 'DAddSub' <Latency = 4> <II = 1> <Delay = 8.23> <FuncUnit> <Opcode : 'dadd' 'dsub'> <InPorts = 2> <OutPorts = 1>
ST_20 : Operation 104 [1/5] (8.23ns)   --->   "%cur_sin = fadd double %tmp_5, %cur_sin_0" [cordic.cpp:47]   --->   Operation 104 'dadd' 'cur_sin' <Predicate = true> <Delay = 8.23> <Core = "DAddSub">   --->   Core 115 'DAddSub' <Latency = 4> <II = 1> <Delay = 8.23> <FuncUnit> <Opcode : 'dadd' 'dsub'> <InPorts = 2> <OutPorts = 1>
ST_20 : Operation 105 [1/1] (0.00ns)   --->   "br label %1" [cordic.cpp:37]   --->   Operation 105 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('cur_sin') with incoming values : ('cur_sin', cordic.cpp:47) [13]  (1.77 ns)

 <State 2>: 5.46ns
The critical path consists of the following:
	'phi' operation ('p_0', cordic.cpp:17) with incoming values : ('theta', cordic.cpp:17) ('theta', cordic.cpp:50) [17]  (0 ns)
	'dcmp' operation ('tmp_3', cordic.cpp:41) [30]  (5.46 ns)

 <State 3>: 6.94ns
The critical path consists of the following:
	'dcmp' operation ('tmp_3', cordic.cpp:41) [30]  (5.46 ns)
	'and' operation ('and_ln41', cordic.cpp:41) [31]  (0 ns)
	'select' operation ('select_ln46', cordic.cpp:46) [32]  (1.48 ns)

 <State 4>: 7.79ns
The critical path consists of the following:
	'dmul' operation ('tmp_1', cordic.cpp:46) [33]  (7.79 ns)

 <State 5>: 7.79ns
The critical path consists of the following:
	'dmul' operation ('tmp_1', cordic.cpp:46) [33]  (7.79 ns)

 <State 6>: 7.79ns
The critical path consists of the following:
	'dmul' operation ('tmp_1', cordic.cpp:46) [33]  (7.79 ns)

 <State 7>: 7.79ns
The critical path consists of the following:
	'dmul' operation ('tmp_1', cordic.cpp:46) [33]  (7.79 ns)

 <State 8>: 7.79ns
The critical path consists of the following:
	'dmul' operation ('tmp_1', cordic.cpp:46) [33]  (7.79 ns)

 <State 9>: 7.79ns
The critical path consists of the following:
	'dmul' operation ('tmp_1', cordic.cpp:46) [33]  (7.79 ns)

 <State 10>: 8.23ns
The critical path consists of the following:
	'dsub' operation ('theta', cordic.cpp:50) [43]  (8.23 ns)

 <State 11>: 8.23ns
The critical path consists of the following:
	'dsub' operation ('theta', cordic.cpp:50) [43]  (8.23 ns)

 <State 12>: 8.23ns
The critical path consists of the following:
	'dsub' operation ('theta', cordic.cpp:50) [43]  (8.23 ns)

 <State 13>: 8.23ns
The critical path consists of the following:
	'dsub' operation ('theta', cordic.cpp:50) [43]  (8.23 ns)

 <State 14>: 8.23ns
The critical path consists of the following:
	'dsub' operation ('theta', cordic.cpp:50) [43]  (8.23 ns)

 <State 15>: 7.79ns
The critical path consists of the following:
	'dmul' operation ('tmp_2', cordic.cpp:46) [34]  (7.79 ns)

 <State 16>: 8.23ns
The critical path consists of the following:
	'dsub' operation ('cur_cos', cordic.cpp:46) [35]  (8.23 ns)

 <State 17>: 8.23ns
The critical path consists of the following:
	'dsub' operation ('cur_cos', cordic.cpp:46) [35]  (8.23 ns)

 <State 18>: 8.23ns
The critical path consists of the following:
	'dsub' operation ('cur_cos', cordic.cpp:46) [35]  (8.23 ns)

 <State 19>: 8.23ns
The critical path consists of the following:
	'dsub' operation ('cur_cos', cordic.cpp:46) [35]  (8.23 ns)

 <State 20>: 8.23ns
The critical path consists of the following:
	'dsub' operation ('cur_cos', cordic.cpp:46) [35]  (8.23 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
